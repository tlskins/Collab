class RegistrationsController < Devise::RegistrationsController

  # GET /resource/sign_up
  def new
    puts 'In custom devise registrations controller devise#new'
    if params[:email] and params[:collab_id] and params[:invite_token]
      invite = Invite.find_by(email: params[:email], collab_id: params[:collab_id], invite_token: params[:invite_token])
      if invite
	@email = invite.email
	@collab_id = invite.collab_id
	@invite_token = invite.invite_token
      end
    end
    build_resource({})
    yield resource if block_given?
    respond_with resource
  end

  # POST /resource
  def create
    puts 'In custom devise registrations controller devise#create'
    invite = Invite.find_by(collab_id: params[:collab_id], email: params[:admin][:email], invite_token: params[:invite_token])
    if invite
      invite.destroy
      collab_project.collaborators.create(admin_id: resource.id, collab_id: params[:collab_project_id]) if CollabProject.find(params[:collab_project_id])
    end

    build_resource(sign_up_params)

    resource.save
    yield resource if block_given?
    if resource.persisted?
      if resource.active_for_authentication?
        set_flash_message! :notice, :signed_up
        sign_up(resource_name, resource)
	# create collaborator if invited
        invite = Invite.find_by(collab_id: params[:collab_id], email: params[:admin][:email], invite_token: params[:invite_token])
        if invite
          invite.destroy
          collab_project.collaborators.create(admin_id: resource.id, collab_id: params[:collab_project_id]) if CollabProject.find(params[:collab_project_id])
        end # end create collaborator
        respond_with resource, location: after_sign_up_path_for(resource)
      else
        set_flash_message! :notice, :"signed_up_but_#{resource.inactive_message}"
        expire_data_after_sign_in!
        respond_with resource, location: after_inactive_sign_up_path_for(resource)
      end
    else
      clean_up_passwords resource
      set_minimum_password_length
      respond_with resource
    end
  end

end
